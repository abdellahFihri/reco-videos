{"version":3,"sources":["Components/SearchBar.jsx","APIs/youtube.js","Components/VideoItem.jsx","Components/videoList.jsx","Components/Spinner.jsx","Components/VideoDetail.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","term","onInputChange","event","setState","target","value","onFormSubmit","preventDefault","props","id","className","onSubmit","this","type","onChange","Component","axios","create","baseURL","params","VideoItem","video","onVideoSelect","href","onClick","src","snippet","thumbnails","default","url","alt","title","VideoList","videos","renderedList","map","console","log","etag","key","Spinner","style","message","defaultProps","VideoDetail","background","videoSrc","videoId","description","App","selectedVideo","onTermSubmit","a","youtube","get","maxResults","part","q","response","data","items","Boolean","window","location","hostname","match","startApp","cordovaWork","ReactDOM","render","document","getElementById","cordova","addEventListener","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.689ae67b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass SearchBar extends Component {\r\n  state = { term: \"\" };\r\n\r\n  onInputChange = event => {\r\n    this.setState({ term: event.target.value });\r\n  };\r\n  onFormSubmit = event => {\r\n    event.preventDefault(); //prevent default behavior\r\n    this.props.onFormSubmit(this.state.term); //give the value of state to callback in app for onform submit\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"searchBar\" className=\"search-bar ui segment\">\r\n        <form onSubmit={this.onFormSubmit} className=\"ui form\">\r\n          <div className=\"field\">\r\n            <label>Search a video</label>\r\n            <input\r\n              type=\"text\"\r\n              value={this.state.term}\r\n              onChange={this.onInputChange}\r\n            />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import axios from 'axios';\r\n\r\n// const KEY='AIzaSyBqr8Wmz7vAzqrVsnao3Mm5rAzkfHMsM6A'; //const varibales in uppercase to know that its a const\r\n\r\nexport default axios.create({\r\n  baseURL : 'https://www.googleapis.com/youtube/v3',//no ending /\r\n  params:{\r\n    // maxResults: 5,\r\n    // part:'snippet',\r\n    //   key : KEY\r\n  }\r\n});","import React from \"react\";\r\nimport \"./VideoItem.css\";\r\n\r\n\r\n\r\nconst VideoItem = ({ video, onVideoSelect }) => {\r\n  \r\n  return (\r\n    <a href=\"#searchBar\">\r\n    <div onClick={() => onVideoSelect(video)} className=\"video-item item\">\r\n      {/*  got tho make call back with ()=> and video as argument */}\r\n      <img\r\n        className=\"ui image\"\r\n        src={video.snippet.thumbnails.default.url}\r\n        alt={video.snippet.title}\r\n      />\r\n      <div className=\"content\">\r\n        <div className=\"header\">{video.snippet.title}</div>\r\n      </div>\r\n    </div>\r\n    </a>\r\n  );\r\n};\r\nexport default VideoItem;\r\n","import React from \"react\";\r\nimport VideoItem from \"./VideoItem\";\r\n\r\nconst VideoList = ({ videos, onVideoSelect }) => {\r\n  //distructuring from the props\r\n  const renderedList = videos.map(video => {\r\n      console.log('video id ',video.etag)\r\n    return (\r\n    <VideoItem key={video.etag} onVideoSelect={onVideoSelect} video={video} />\r\n    );\r\n\r\n});\r\n\r\n  return <div className=\"ui right aligned divided list\">{renderedList}</div>;\r\n};\r\nexport default VideoList;\r\n","import React from 'react';\r\n\r\nconst Spinner=(props)=>{\r\n    console.log(props.style)\r\n    return(\r\n\r\n  <div style={props.style} className=\"ui active dimmer\">\r\n    <div className=\"ui text loader\">{props.message}</div>\r\n  </div>\r\n    );\r\n};\r\nSpinner.defaultProps={\r\n  message:'Loading...'// here to specify what to show in default case in message props\r\n}\r\nexport default Spinner;\r\n","import React from 'react';\r\nimport Spinner from './Spinner'\r\n\r\nconst VideoDetail = ({ video }) => {\r\n  if (!video) {\r\n    return <Spinner style={{background:\"red!important\"}}/>;\r\n  }\r\n  const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`;\r\n\r\n  return (\r\n    <div id=\"videoDetail\">\r\n      <div className=\"ui embed\">\r\n        <iframe title=\"video player\" src={videoSrc}></iframe>\r\n      </div>\r\n      <div id=\"details\"className=\"ui segment\">\r\n        <h4 className=\"ui header\">{video.snippet.title}</h4>\r\n        <p>{video.snippet.description}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoDetail;\r\n","import React, { Component } from \"react\";\nimport SearchBar from \"./Components/SearchBar\";\nimport youtube from \"./APIs/youtube\";\nimport VideoList from \"./Components/videoList\";\nimport VideoDetail from \"./Components/VideoDetail\";\nimport './Components/App.css';\nimport Spinner from \"./Components/Spinner\";\n\nclass App extends Component {\n  state = { videos: [], selectedVideo: null };\n  componentDidMount() {\n    // by declaring this function we set it to do it at rendering n we set a default search value\n    this.onTermSubmit(\"\");\n  }\n\n  onTermSubmit = async term => {\n    const KEY = \"AIzaSyBqr8Wmz7vAzqrVsnao3Mm5rAzkfHMsM6A\";\n    const response = await youtube.get(\"/search\", {\n      params: {\n        maxResults:20,\n        part: \"snippet\",\n        q: term,\n        key: KEY\n      }\n    });\n    console.log(response)\n   \n    this.setState({\n      videos: response.data.items,\n      selectedVideo: response.data.items[0] //to make the fisrt video display automatically in the video player\n    });\n    //response is the whole request result that we should access to  display data\n  };\n \n \n  onVideoSelect = video => {\n    this.setState({ selectedVideo: video });\n  };\n\n  render() {\n    if(this.state.videos===[]){\n      return <Spinner/>\n    }else{\n    return (\n      <div className=\"container\">\n        <SearchBar onFormSubmit={this.onTermSubmit} />\n        <div className=\"ui grid\">\n          <div className=\"row\">\n            <div className=\"col-md-8\">\n              <VideoDetail video={this.state.selectedVideo} />\n            </div>\n            <div className=\"col-md-4\">\n              <VideoList\n                onVideoSelect={this.onVideoSelect}\n                videos={this.state.videos}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst startApp = (cordovaWork) => {\n    ReactDOM.render(\n        <div>\n            <App cordovaWork={cordovaWork} />\n        </div>,\n        document.getElementById('root')\n    );\n}\n\nif (!window.cordova) {\n    startApp(false)\n} else {\n    document.addEventListener('deviceready', () => {\n        startApp(true);\n    }, false);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}